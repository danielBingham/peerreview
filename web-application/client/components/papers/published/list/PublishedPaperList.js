import React, { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useSearchParams } from 'react-router-dom'

import isEqual from 'lodash.isequal'

import { clearList, countPapers, getPapers, cleanupRequest } from '/state/papers'
import { countResponses, cleanupRequest as cleanupResponseRequest } from '/state/responses'

import Spinner from '/components/Spinner'
import PaginationControls from '/components/PaginationControls'

import PublishedPaperListItem from './PublishedPaperListItem'

import './PublishedPaperList.css'


/**
 * A list displaying the papers that have been posted. 
 *
 * @param {object} props - An empty object, takes no props.
 */
const PublishedPaperList = function(props) { 
    const [ searchParams, setSearchParams ] = useSearchParams()

    // ======= Request Tracking =====================================

    const [requestId, setRequestId ] = useState(null)
    const request = useSelector(function(state) {
        if (requestId) {
            return state.papers.requests[requestId]
        } else {
            null
        }
    })

    const [countRequestId, setCountRequestId ] = useState(null)
    const countRequest = useSelector(function(state) {
        if (countRequestId) {
            return state.papers.requests[countRequestId]
        } else {
            null
        }
    })

    const [responseRequestId, setResponseRequestId ] = useState(null)
    const responseRequest = useSelector(function(state) {
        if (responseRequestId) {
            return state.papers.requests[responseRequestId]
        } else {
            null
        }
    })


    // ======= Redux State ==========================================
   
    const paperList = useSelector(function(state) {
        return state.papers.list
    })

    const counts = useSelector(function(state) {
        return state.papers.counts 
    })

    // ======= Effect Handling ======================================

    const dispatch = useDispatch()

    const setSort = function(sortBy) {
        searchParams.set('sort', sortBy)
        setSearchParams(searchParams)
    }

    const queryForPapers = function({searchString, sortBy, page}) {
        let query = {}
        if ( props.query ) {
            query = {
                ...props.query
            }
        }

        if ( props.fieldId ) {
            if ( query.fields ) {
                query.fields.push(props.fieldId)
            } else {
                query.fields = [ props.fieldId ]
            }
        }

        if ( searchString ) {
            query.searchString = searchString
        }

        if ( props.authorId ) {
            query.authorId = props.authorId
        }

        query.isDraft = false

        if ( ! sortBy ) {
            query.sort = 'newest'
        } else {
            query.sort = sortBy
        }

        if ( ! page ) {
            query.page = 1
        } else {
            query.page = page
        }

        setCountRequestId(dispatch(countPapers(query, true)))
        setRequestId(dispatch(getPapers(query, true)))
        setResponseRequestId(dispatch(countResponses()))
    }

    useEffect(function() {
        const params = {
            searchString: searchParams.get('q'),
            sortBy: searchParams.get('sort'),
            page: searchParams.get('page')
        }
        queryForPapers(params)
    }, [ searchParams, props.fieldId ])

    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( countRequestId ) {
                dispatch(cleanupRequest({requestId: countRequestId}))
            }
        }
    }, [ countRequestId ])


    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( requestId ) {
                dispatch(cleanupRequest({requestId: requestId}))
            }
        }
    }, [ requestId ])

    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( responseRequestId ) {
                dispatch(cleanupResponseRequest({requestId: responseRequestId}))
            }
        }
    }, [ responseRequestId ])

    // ======= Render ===============================================
    
    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.
    
    let content = (<Spinner local={true} /> ) 
    if ( request && request.state == 'fulfilled') { 
        content = []
        for (const paper of paperList) {
            content.push(<PublishedPaperListItem paper={paper} key={paper.id} />)
        }

        if ( content.length == 0 ) {
            content = ( <div className="empty-search">No published papers to display.</div>)
        }
    }

    let error = null
    if ( request && request.state == 'failed' ) {
        error = (<div className="error">Something went wrong with our attempt to retreive the paper list: { request.error }.</div>)
    }

    const newestParams = new URLSearchParams(searchParams.toString())
    newestParams.set('sort', 'newest')

    const activeParams = new URLSearchParams(searchParams.toString())
    activeParams.set('sort', 'active')

    const sort = searchParams.get('sort') ? searchParams.get('sort') : 'newest'
    return (
        <section className="published-paper-list">
            <div className="header">
                <h2>Published Papers</h2>
                <div className="controls">
                    <div className="sort">
                        <a href={`?${newestParams.toString()}`} 
                            onClick={(e) => { e.preventDefault(); setSort('newest')}} 
                            className={( sort == 'newest' ? 'selected' : '' )} >Newest</a>
                        <a href={`?${activeParams.toString()}`} 
                            onClick={(e) => { e.preventDefault(); setSort('active')}} 
                            className={( sort == 'active' ? 'selected' : '' )} >Active</a>
                    </div>
                </div>
            </div>
            <div>
                {error}
                {content}
            </div>
            <PaginationControls counts={counts} />
        </section>
    )
}

export default PublishedPaperList 
