import React, { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useSearchParams } from 'react-router-dom'

import isEqual from 'lodash.isequal'

import { clearList, countJournals, getJournals, cleanupRequest } from '/state/journals'
import { countResponses, cleanupRequest as cleanupResponseRequest } from '/state/responses'

import Spinner from '/components/Spinner'
import List from '/components/generic/list/List'
import ListControl from '/components/generic/list/ListControl'
import ListHeader from '/components/generic/list/ListHeader'
import ListRowContent from '/components/generic/list/ListRowContent'
import ListNoContent from '/components/generic/list/ListNoContent'

import JournalListItem from './JournalListItem'

import './JournalList.css'


/**
 * A list displaying the journals that have been posted. 
 *
 * @param {object} props - An empty object, takes no props.
 */
const JournalList = function(props) { 
    const [ searchParams, setSearchParams ] = useSearchParams()

    // ======= Request Tracking =====================================

    const [requestId, setRequestId ] = useState(null)
    const request = useSelector(function(state) {
        if (requestId) {
            return state.journals.requests[requestId]
        } else {
            null
        }
    })


    // ======= Redux State ==========================================
   
    const journalList = useSelector(function(state) {
        return state.journals.list
    })
    console.log(journalList)

    // ======= Effect Handling ======================================

    const dispatch = useDispatch()

    const queryForJournals = function() {
        setRequestId(dispatch(getJournals(null, true)))
    }

    useEffect(function() {
        queryForJournals()
    }, [])


    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( requestId ) {
                dispatch(cleanupRequest({requestId: requestId}))
            }
        }
    }, [ requestId ])

    // ======= Render ===============================================
    
    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.
    
    let content = (<Spinner local={true} /> ) 
    let noContent = null
    if ( request && request.state == 'fulfilled') { 
        content = []
        for (const journal of journalList) {
            content.push(<JournalListItem journal={journal} key={journal.id} />)
        }

        if ( content.length == 0 ) {
            content = null
            noContent = ( <div className="empty-search">No journals to display.</div>)
        }
    }

    if ( request && request.state == 'failed' ) {
        content = null
        noContent = (<div className="error">Something went wrong with our attempt to retreive the journal list: { request.error }.</div>)
    }

    return (
        <List>
            <ListHeader title="Journals">
            </ListHeader>
            <ListNoContent>
                {noContent}
            </ListNoContent>
            <ListRowContent>
                {content}
            </ListRowContent>
        </List>
    )
}

export default JournalList 
