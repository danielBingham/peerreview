import React, { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useSearchParams } from 'react-router-dom'

import { BookOpenIcon } from '@heroicons/react/24/outline'

import { clearJournalQuery, getJournals, cleanupRequest } from '/state/journals'

import Spinner from '/components/Spinner'
import { 
    List, 
    ListHeader, 
    ListTitle, 
    ListControls, 
    ListControl, 
    ListRowContent, 
    ListNoContent 
} from '/components/generic/list/List'
import PaginationControls from '/components/PaginationControls'

import JournalListItem from './JournalListItem'

import './JournalList.css'


/**
 * A list displaying the journals that have been posted. 
 *
 * @param {object} props - An empty object, takes no props.
 */
const JournalList = function(props) { 
    const [ searchParams, setSearchParams ] = useSearchParams()

    // ======= Request Tracking =====================================

    const [requestId, setRequestId ] = useState(null)
    const request = useSelector(function(state) {
        if (requestId) {
            return state.journals.requests[requestId]
        } else {
            null
        }
    })


    // ======= Redux State ==========================================
   
    const journals = useSelector(function(state) {
        if ( ! state.journals.queries['JournalList'] ) {
            return []
        }

        const journals = []
        for ( const id of state.journals.queries['JournalList'].list) {
            journals.push(state.journals.dictionary[id])
        }

        return journals
    })

    const meta = useSelector(function(state) {
        if ( ! state.journals.queries['JournalList'] ) {
            return {
                count: 0,
                page: 1,
                pageSize: 1,
                numberOfPages: 1
            }
        }
        return state.journals.queries['JournalList'].meta
    })

    // ======= Effect Handling ======================================

    const dispatch = useDispatch()

    const setSort = function(sortBy) {
        searchParams.set('sort', sortBy)
        setSearchParams(searchParams)
    }

    const queryForJournals = function(params) {
        params.relations = [ 'submissions' ]

        if ( props.userId ) {
            params.userId = props.userId
        }

        setRequestId(dispatch(getJournals('JournalList', params)))
    }

    useEffect(function() {
        const params = {}

        params.page = searchParams.get('page')
        if ( ! params.page ) {
            params.page = 1
        }
        
        params.sort = searchParams.get('sort')
        if ( ! params.sort ) {
            params.sort = 'newest'
        }

        queryForJournals(params)

        return function cleanup() {
            dispatch(clearJournalQuery({ name: 'JournalList' }))
        }
    }, [])


    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( requestId ) {
                dispatch(cleanupRequest({requestId: requestId}))
            }
        }
    }, [ requestId ])

    // ======= Render ===============================================
    
    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.
    
    let content = (<Spinner local={true} /> ) 
    let noContent = null
    if ( request && request.state == 'fulfilled') { 
        content = []
        for (const journal of journals) {
            content.push(<JournalListItem journal={journal} key={journal.id} />)
        }

        if ( content.length == 0 ) {
            content = null
            noContent = ( <div className="empty-search">No journals to display.</div>)
        }
    }

    if ( request && request.state == 'failed' ) {
        content = null
        noContent = (<div className="error">Something went wrong with our attempt to retreive the journal list: { request.error }.</div>)
    }
    
    const newestParams = new URLSearchParams(searchParams.toString())
    newestParams.set('sort', 'newest')

    const alphabeticalParams = new URLSearchParams(searchParams.toString())
    alphabeticalParams.set('sort', 'alphabetical')

    const sort = searchParams.get('sort') ? searchParams.get('sort') : 'newest'

    return (
        <List>
            <ListHeader>
                <ListTitle><BookOpenIcon/>Journals</ListTitle>
                <ListControls>
                    <ListControl url={`?${newestParams.toString()}`} 
                        onClick={() => setSort('newest')} 
                        selected={sort == 'newest'} 
                        name="Newest" />
                    <ListControl url={`?${alphabeticalParams.toString()}`} 
                        onClick={() => setSort('alphabetical')} 
                        selected={sort == 'alphabetical'} 
                        name="Alphabetical" />
                </ListControls>
            </ListHeader>
            <ListNoContent>
                {noContent}
            </ListNoContent>
            <ListRowContent>
                {content}
            </ListRowContent>
            <PaginationControls meta={meta} /> 
        </List>
    )
}

export default JournalList 
