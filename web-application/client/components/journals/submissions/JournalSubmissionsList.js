import React, { useState, useEffect } from 'react'
import { useParams, useSearchParams, Link } from 'react-router-dom'

import { useDispatch, useSelector } from 'react-redux'

import { getJournalSubmissions, cleanupRequest } from '/state/journalSubmissions'
import { countReviews, cleanupRequest as cleanupReviewRequest } from '/state/reviews'

import DateTag from '/components/DateTag'
import Spinner from '/components/Spinner'

import { 
    List, 
    ListHeader, 
    ListTitle, 
    ListControls, 
    ListControl, 
    ListRowContent, 
    ListNoContent 
} from '/components/generic/list/List'
import PaginationControls from '/components/PaginationControls'

import DraftPapersListItemView from '/components/papers/draft/list/DraftPapersListItemView'

import SubmissionStatusWidget from '/components/journals/widgets/status/SubmissionStatusWidget'
import AssignmentWidget from '/components/journals/widgets/assignments/AssignmentWidget'

import './JournalSubmissionsList.css'

/**
 * Render a list of draft papers belonging to the logged in user.
 * 
 * Must be logged in to view.
 *
 * TODO Refactor this to render drafts of papers and to take a query in props
 * so that we can reuse it for both the "reviews" page and the "my drafts"
 * page.
 *
 * @param {object} props    Standard react props object - empty.
 */
const JournalSubmissionsList = function(props) {

    // ======= Request Tracking =====================================

    const [requestId, setRequestId] = useState(null)
    const request = useSelector(function(state) {
        if ( requestId) {
            return state.journalSubmissions.requests[requestId]
        } else {
            return null
        }
    })

    const [countReviewsRequestId, setCountReviewsRequestId] = useState(null)
    const countReviewsRequest = useSelector(function(state) {
        if ( countReviewsRequestId) {
            return state.reviews.requests[countReviewsRequestId]
        } else {
            return null
        }
    })

    // ======= Redux State ==========================================

    const submissions = useSelector(function(state) {
        if ( state.journalSubmissions.queries['JournalSubmissionsList'] ) {
            return state.journalSubmissions.queries['JournalSubmissionsList'].list
        } else {
            return []
        }
    })

    const paperDictionary = useSelector(function(state) {
        const dictionary = {}
        for(const submission of submissions) {
            dictionary[submission.paperId] = state.papers.dictionary[submission.paperId]
        }
        return dictionary
    })


    const currentUser = useSelector(function(state) {
        return state.authentication.currentUser
    })

    // ======= Effect Handling ======================================

    const dispatch = useDispatch()

    const queryForPapers = function() {
        setRequestId(dispatch(getJournalSubmissions('JournalSubmissionsList', props.id, { status: [ 'submitted', 'review', 'proofing' ], relations: [ "papers", "users"] })))
        setCountReviewsRequestId(dispatch(countReviews()))
    }

    useEffect(function() {
        queryForPapers()
    }, [])

    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( requestId ) {
                dispatch(cleanupRequest({ requestId: requestId }))
            }
        }
    }, [ requestId ])

    useEffect(function() {
        return function cleanup() {
            if ( countReviewsRequestId ) {
                dispatch(cleanupReviewRequest({ requestId: countReviewsRequestId }))
            }
        }
    }, [ countReviewsRequestId ])

    // ====================== Render ==========================================

    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.

    let content = ( <Spinner /> )
    let noContent = null
    if ( request && request.state == 'fulfilled' && countReviewsRequest && countReviewsRequest.state == 'fulfilled') {
        content = []
        for (const submission of submissions) {

            content.push(
                <div className="journal-submission" key={submission.id}>
                    <DraftPapersListItemView paper={paperDictionary[submission.paperId]} />
                    <div className="submission">
                        <div className="grid-wrapper">
                            <div className="date">
                                <strong>Submitted:</strong> <DateTag timestamp={submission.createdDate} />
                            </div>
                            <div className="status">
                                <SubmissionStatusWidget id={submission.id} />
                            </div>
                            <div className="editors">
                                <AssignmentWidget type="editor" id={submission.id} /> 
                            </div>
                            <div className="reviewers">
                                <AssignmentWidget type="reviewer" id={submission.id} /> 
                            </div>
                        </div>
                    </div>
                </div>
            )
        }

        if ( content.length <= 0 ) {
            content = null
            noContent =  (<div className="empty-search">No papers to list.</div>)
        }
    } else if (request && request.state == 'failed') {
        content = null
        noContent = ( <div className="error">Attempt to retrieve drafts failed with error: { request.error }.  Please report this as a bug.</div> ) 
    }


    return (
        <List>
            <ListHeader>
                <ListTitle>Draft Submissions</ListTitle>
            </ListHeader>
            <ListNoContent>
                {noContent}
            </ListNoContent>
            <ListRowContent>
                { content }
            </ListRowContent>
        </List>
    )

}

export default JournalSubmissionsList 
