import React, { useState, useEffect, useLayoutEffect } from 'react'
import { useNavigate } from 'react-router'
import { useParams, Link } from 'react-router-dom'

import { useDispatch, useSelector } from 'react-redux'

import { clearList, getPapers, cleanupRequest } from '/state/papers'

import Spinner from '/components/Spinner'

import DraftPapersAwaitingReviewListItemView from './DraftPapersAwaitingReviewListItemView'
import './DraftPapersAwaitingReviewListView.css'

const DraftPapersAwaitingReviewListView = function(props) {

    // ======= Request Tracking =====================================

    const [requestId, setRequestId] = useState(null)
    const request = useSelector(function(state) {
        if ( requestId) {
            return state.papers.requests[requestId]
        } else {
            return null
        }
    })

    // ======= Redux State ==========================================

    const paperList = useSelector(function(state) {
        return state.papers.list
    })
    
    const currentUser = useSelector(function(state) {
        return state.authentication.currentUser
    })

    // ======= Effect Handling ======================================

    const dispatch = useDispatch()
    const navigate = useNavigate()

    useEffect(function() {
        if ( ! currentUser ) {
            navigate("/")
        }
    }, [ currentUser ])

    useLayoutEffect(function() {
        if ( currentUser ) {
            setRequestId(dispatch(getPapers({ isDraft: true }, true))) 
        }
    }, [ currentUser ])

    // Clean up our request.
    useEffect(function() {
        return function cleanup() {
            if ( requestId ) {
                dispatch(cleanupRequest({ requestId: requestId }))
            }
        }
    }, [ requestId ])

    // ====================== Render ==========================================

    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.
    let content = (<div className="spinner-wrapper"> <Spinner /> </div>)
    if ( currentUser && request && request.state == 'fulfilled') {
        content = []
        for (const paper of paperList) {
            if ( ! paper.authors.find((a) => a.user.id == currentUser.id) ) {
                content.push(<DraftPapersAwaitingReviewListItemView paper={paper} key={paper.id} />)
            }
        }
        if ( content.length == 0 ) {
            content = ( <div className="empty-search">No papers awaiting review.</div> )
        }
    } else if ( currentUser && request && request.state == 'failed' ) {
        content = (<div className="error request-error">Something went wrong with our attempt to pull drafts from the backend: { request.error }.</div> )
    }

    return (
        <div className="draft-paper-list">
            <div className="header">
                <h2>Draft Papers Awaiting Review</h2>
                <div className="controls">
                    <div className="sort">
                        <div>Newest</div>
                        <div>Active</div>
                    </div>
                </div>
            </div>
            <div className="list">
                { content }
            </div>
        </div >
    )

}

export default DraftPapersAwaitingReviewListView 
