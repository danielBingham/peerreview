import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router'
import { useParams, Link } from 'react-router-dom'

import { useDispatch, useSelector } from 'react-redux'

import { clearList, getPapers, cleanupRequest } from '/state/papers'

import Spinner from '/components/Spinner'

import DraftPapersListItemView from './DraftPapersListItemView'

import './DraftPapersListView.css'

/**
 * Render a list of draft papers belonging to the logged in user.
 * 
 * Must be logged in to view.
 *
 * TODO Refactor this to render drafts of papers and to take a query in props
 * so that we can reuse it for both the "reviews" page and the "my drafts"
 * page.
 *
 * @param {object} props    Standard react props object - empty.
 */
const DraftPapersListView = function(props) {

    // ======= Request Tracking =====================================

    const [requestId, setRequestId] = useState(null)
    const request = useSelector(function(state) {
        if ( requestId) {
            return state.papers.requests[requestId]
        } else {
            return null
        }
    })

    // ======= Redux State ==========================================

    const paperList = useSelector(function(state) {
        return state.papers.list
    })
    
    const currentUser = useSelector(function(state) {
        return state.authentication.currentUser
    })

    // ======= Effect Handling ======================================

    const dispatch = useDispatch()
    const navigate = useNavigate()

    /**
     * Make the initial request.  Logging out should destroy the tree and
     * unmount the component, but just in case, re-run the query if the
     * currentUser changes.
     */
    useEffect(function() {
        if ( currentUser ) {
            setRequestId(dispatch(getPapers({ authorId: currentUser.id, isDraft: true }, true)))
        }
    }, [ currentUser ])

    // Cleanup our request.
    useEffect(function() {
        return function cleanup() {
            if ( requestId ) {
                dispatch(cleanupRequest({ requestId: requestId }))
            }
        }
    }, [ requestId ])

    // ====================== Render ==========================================

    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.

    let content = ( <Spinner /> )
    if ( currentUser ) {
        if ( request && request.state == 'fulfilled') {
            content = []
            for (const paper of paperList) {
                content.push(<DraftPapersListItemView paper={paper} key={paper.id} />)
            }

            if ( content.length <= 0 ) {
                content =  (<div className="empty-search">No papers to list.</div>)
            }
        } else if (request && request.state == 'failed') {
            content = ( <div className="error">Attempt to retrieve drafts failed with error: { request.error }.  Please report this as a bug.</div> ) 
        }
    } else {
        content = (<div className="error">You must be logged in to view drafts.</div>)
    }

    return (
        <section className="draft-paper-list">
            <div className="header">
                <h2>Draft Papers</h2>
                <div className="controls">
                    <div className="sort">
                        <div>Newest</div>
                        <div>Active</div>
                    </div>
                </div>
            </div>
            <div>
                { content }
            </div>
        </section>
    )

}

export default DraftPapersListView 
