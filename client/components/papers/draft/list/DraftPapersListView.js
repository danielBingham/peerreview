import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router'
import { useParams, Link } from 'react-router-dom'

import { useDispatch, useSelector } from 'react-redux'

import { clearList, getPapers, cleanupRequest } from '/state/papers'

import Spinner from '/components/Spinner'

import DraftPapersListItemView from './DraftPapersListItemView'

import './DraftPapersListView.css'

const DraftPapersListView = function(props) {
    const [requestId, setRequestId] = useState(null)

    const dispatch = useDispatch()
    const navigate = useNavigate()

    const request = useSelector(function(state) {
        if ( requestId) {
            return state.papers.requests[requestId]
        } else {
            return null
        }
    })

    const paperList = useSelector(function(state) {
        return state.papers.list
    })
    
    const currentUser = useSelector(function(state) {
        return state.authentication.currentUser
    })

    useEffect(function() {
        if ( ! currentUser ) {
            navigate("/")
        }
    }, [ currentUser ])

    useEffect(function() {
        if ( currentUser && ! requestId) {
            dispatch(clearList())
            setRequestId(dispatch(getPapers({ authorId: currentUser.id, isDraft: true })))
        }

        return function cleanup() {
            if ( request ) {
                dispatch(cleanupRequest(request))
            }
        }
    }, [ currentUser, requestId ])

    // ====================== Render ==========================================

    // Don't render unless we've completed the request, otherwise we could wind
    // up rendering a list generated by a different request.
    if ( currentUser && request && request.state == 'fulfilled') {
        const listItems = []
        for (const paper of paperList) {
            listItems.push(<DraftPapersListItemView paper={paper} key={paper.id} />)
        }

        return (
            <section className="draft-paper-list">
                <div className="error"> {request && request.error} </div>
                <div className="header">
                    <h2>Draft Papers</h2>
                    <div className="controls">
                        <div className="sort">
                            <div>Newest</div>
                            <div>Active</div>
                        </div>
                    </div>
                </div>
                <div>
                    { listItems.length > 0 ? listItems : <div className="empty-search">No papers to list.</div> }
                </div>
            </section>
        )
    } else {
        return (
            <Spinner />
        )
    }

}

export default DraftPapersListView 
